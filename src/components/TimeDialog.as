package  {	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	public class TimeDialog extends Sprite 	{		private var _time:Date = null;				public function TimeDialog() 		{			super();			addEventListener( Event.ADDED_TO_STAGE, doAdded );		}		public static function formatShort( value:Date ):String		{			var hrs:Number = 0;			var meridian:String = null;						hrs = value.hours % 12;			hrs = hrs == 0 ? 12 : hrs;						meridian = value.hours < 12 ? "am" : "pm";						return hrs + ":" + MinuteStepper.pad( value.minutes ) + meridian;		}		private function update():void		{			var hrs:Number = 0;						hrs = hour.current % 12;			hrs = hrs == 0 ? 12 : hrs;						title.text = hrs.toString() + ":" + MinuteStepper.pad( minute.current ) + " " + ampm.label;		}		protected function doAdded( event:Event ):void		{			hour.addEventListener( StepperEvent.CHANGE, doStepperChange );						minute.addEventListener( StepperEvent.CHANGE, doStepperChange );						ampm.label = "AM";			ampm.addEventListener( MouseEvent.CLICK, doMeridianClick );			ampm.addEventListener( Event.ADDED_TO_STAGE, doMeridianAdded );						ok.label = "Set";			ok.addEventListener( Event.ADDED_TO_STAGE, doControlAdded );			ok.addEventListener( MouseEvent.CLICK, doOkClick );						cancel.label = "Cancel";			cancel.addEventListener( Event.ADDED_TO_STAGE, doControlAdded );						cancel.addEventListener( MouseEvent.CLICK, doCancelClick );		}				protected function doControlAdded( event:Event ):void		{			Button( event.currentTarget ).setWidth( 162 );		}		protected function doMeridianAdded( event:Event ):void		{			ampm.setWidth( 99 );		}				protected function doMeridianClick( event:Event ):void		{			if( ampm.label == "AM" )			{				ampm.label = "PM";			} else {				ampm.label = "AM";			}						update();		}				protected function doOkClick( event:MouseEvent ):void		{			dispatchEvent( new DialogEvent( DialogEvent.OK ) );		}				protected function doCancelClick( event:MouseEvent ):void		{			dispatchEvent( new DialogEvent( DialogEvent.CANCEL ) );		}						protected function doStepperChange( event:StepperEvent ):void		{			update();		}		public function get time():Date		{			var hrs:Number = hour.value;						// Wierd flipping to keep on same day			if( ampm.label == "PM" ) 			{				if( hrs != 12 )				{					hrs = hrs + 12;				}			} else {				if( hrs == 12 )				{					hrs = 0;				}			}						_time.hours = hrs;			_time.minutes = minute.current;						return _time;		}				public function set time( value:Date ):void		{			if( value == null )			{				_time = new Date();			} else {				_time = new Date( value.time );			}			hour.current = value.hours;			minute.current = value.minutes;			ampm.label = value.hours < 12 ? "AM" : "PM";						update();		}			}}